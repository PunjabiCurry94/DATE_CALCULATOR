library(lubridate)
# Function to calculate working days excluding specific dates and weekends
calculate_working_days <- function(date1, date2, excluded_dates) {
# Convert inputs to Date format
date1 <- as.Date(date1, tryFormats = c("%Y-%m-%d", "%d-%m-%Y", "%m/%d/%Y"))
date2 <- as.Date(date2, tryFormats = c("%Y-%m-%d", "%d-%m-%Y", "%m/%d/%Y"))
# Ensure date1 is earlier than date2
if (date1 > date2) {
temp <- date1
date1 <- date2
date2 <- temp
}
# Generate sequence of all dates between date1 and date2
all_dates <- seq(date1, date2, by = "day")
# Convert excluded dates to Date format
excluded_dates <- as.Date(excluded_dates, tryFormats = c("%Y-%m-%d", "%d-%m-%Y", "%m/%d/%Y"))
# Filter out weekends and excluded dates
working_days <- all_dates[!(weekdays(all_dates) %in% c("Saturday", "Sunday"))]
working_days <- working_days[!(working_days %in% excluded_dates)]
# Return count of working days
return(length(working_days))
}
# Example usage
excluded_dates <- c("2025-06-10", "2025-06-12") # List of dates to exclude
date1 <- "16-06-2025"
date2 <- "26/06/2025"
working_days_count <- calculate_working_days(date1, date2, excluded_dates)
library(lubridate)
# Function to calculate working days excluding specific dates and weekends
calculate_working_days <- function(date1, date2, excluded_dates) {
# Convert inputs to Date format
date1 <- as.Date(date1, tryFormats = c("%Y-%m-%d", "%d-%m-%Y", "%m/%d/%Y"))
date2 <- as.Date(date2, tryFormats = c("%Y-%m-%d", "%d-%m-%Y", "%m/%d/%Y"))
# Ensure date1 is earlier than date2
if (date1 > date2) {
temp <- date1
date1 <- date2
date2 <- temp
}
# Generate sequence of all dates between date1 and date2
all_dates <- seq(date1, date2, by = "day")
# Convert excluded dates to Date format
excluded_dates <- as.Date(excluded_dates, tryFormats = c("%Y-%m-%d", "%d-%m-%Y", "%m/%d/%Y"))
# Filter out weekends and excluded dates
working_days <- all_dates[!(weekdays(all_dates) %in% c("Saturday", "Sunday"))]
working_days <- working_days[!(working_days %in% excluded_dates)]
# Return count of working days
return(length(working_days))
}
# Example usage
excluded_dates <- c("2025-06-10", "2025-06-12") # List of dates to exclude
date1 <- "16-06-2025"
date2 <- "26/06/2025"
working_days_count <- calculate_working_days(date1, date2, excluded_dates)
library(lubridate)
# Function to calculate working days excluding specific dates and weekends
calculate_working_days <- function(date1, date2, excluded_dates) {
# Convert inputs to Date format
date1 <- as.Date(date1, tryFormats = c("%Y-%m-%d", "%d-%m-%Y", "%m/%d/%Y"))
date2 <- as.Date(date2, tryFormats = c("%Y-%m-%d", "%d-%m-%Y", "%m/%d/%Y"))
# Ensure date1 is earlier than date2
if (date1 > date2) {
temp <- date1
date1 <- date2
date2 <- temp
}
# Generate sequence of all dates between date1 and date2
all_dates <- seq(date1, date2, by = "day")
# Convert excluded dates to Date format
excluded_dates <- as.Date(excluded_dates, tryFormats = c("%Y-%m-%d", "%d-%m-%Y", "%m/%d/%Y"))
# Filter out weekends and excluded dates
working_days <- all_dates[!(weekdays(all_dates) %in% c("Saturday", "Sunday"))]
working_days <- working_days[!(working_days %in% excluded_dates)]
# Return count of working days
return(length(working_days))
}
# Example usage
excluded_dates <- c("2025-06-10", "2025-06-12") # List of dates to exclude
date1 <- "16-06-2025"
date2 <- "26/06/2025"
working_days_count <- calculate_working_days(date1, date2, excluded_dates)
install.packages("lubridate")
library(lubridate)
install.packages("lubridate")
# Function to calculate working days excluding specific dates and weekends
calculate_working_days <- function(date1, date2, excluded_dates) {
# Convert inputs to Date format
date1 <- as.Date(date1, tryFormats = c("%Y-%m-%d", "%d-%m-%Y", "%m/%d/%Y"))
date2 <- as.Date(date2, tryFormats = c("%Y-%m-%d", "%d-%m-%Y", "%m/%d/%Y"))
# Ensure date1 is earlier than date2
if (date1 > date2) {
temp <- date1
date1 <- date2
date2 <- temp
}
# Generate sequence of all dates between date1 and date2
all_dates <- seq(date1, date2, by = "day")
# Convert excluded dates to Date format
excluded_dates <- as.Date(excluded_dates, tryFormats = c("%Y-%m-%d", "%d-%m-%Y", "%m/%d/%Y"))
# Filter out weekends and excluded dates
working_days <- all_dates[!(weekdays(all_dates) %in% c("Saturday", "Sunday"))]
working_days <- working_days[!(working_days %in% excluded_dates)]
# Return count of working days
return(length(working_days))
}
# Example usage
excluded_dates <- c("2025-06-10", "2025-06-12") # List of dates to exclude
date1 <- "16-06-2025"
date2 <- "26/06/2025"
working_days_count <- calculate_working_days(date1, date2, excluded_dates)
# Convert inputs to Date format
date1 <- as.Date(date1, tryFormats = c("%Y-%m-%d", "%d-%m-%Y", "%m/%d/%Y"))
date2 <- as.Date(date2, tryFormats = c("%Y-%m-%d", "%d-%m-%Y", "%m/%d/%Y"))
# Function to compute date difference while excluding specific dates
compute_days_excluding <- function(start_date, end_date, exclusion_dates) {
# Convert inputs to Date format
start_date <- as.Date(start_date)
end_date <- as.Date(end_date)
exclusion_dates <- as.Date(exclusion_dates)
# Generate sequence of all days between start and end dates
all_days <- seq(start_date, end_date, by = "day")
# Remove days that are in exclusion list
valid_days <- setdiff(all_days, exclusion_dates)
# Return the count of valid days
return(length(valid_days))
}
# Example Usage
start_date <- "2025-06-01"
end_date <- "2025-06-14"
exclusion_dates <- c("2025-06-04", "2025-06-07", "2025-06-10")
# Compute days excluding certain dates
days_count <- compute_days_excluding(start_date, end_date, exclusion_dates)
# Print result
print(days_count)
library(lubridate)
# Function to calculate working days excluding specific dates and weekends
calculate_working_days <- function(start_date, end_date, excluded_dates) {
# Convert inputs to Date format
start_date <- as.Date(start_date, format = "%Y-%m-%d")
end_date <- as.Date(end_date, format = "%Y-%m-%d")
# Ensure start_date is earlier than end_date
if (start_date > end_date) {
temp <- start_date
start_date <- end_date
end_date <- temp
}
# Generate sequence of all dates between start_date and end_date
all_dates <- seq(start_date, end_date, by = "day")
# Convert excluded dates to Date format
excluded_dates <- as.Date(excluded_dates, format = "%Y-%m-%d")
# Filter out weekends and excluded dates
working_days <- all_dates[!(weekdays(all_dates) %in% c("Saturday", "Sunday"))]
working_days <- working_days[!(working_days %in% excluded_dates)]
# Return count of working days
return(length(working_days))
}
# Example usage
excluded_dates <- c("2025-06-10", "2025-06-12") # List of dates to exclude
start_date <- "2025-06-16"
end_date <- "2025-06-26"
working_days_count <- calculate_working_days(start_date, end_date, excluded_dates)
print(paste("Working days count:", working_days_count))
library(lubridate)
calculate_prior_working_date <- function(start_date, days_back, exclude_dates) {
# Convert inputs to Date format
start_date <- as.Date(start_date)
exclude_dates <- as.Date(exclude_dates)
# Initialize counter & date tracker
current_date <- start_date
count <- 0
# Loop backwards until we find the correct working date
while (count < days_back) {
current_date <- current_date - 1  # Move one day back
# Check if it's a working day (not weekend or excluded)
if (!(weekdays(current_date) %in% c("Saturday", "Sunday")) & !(current_date %in% exclude_dates)) {
count <- count + 1
}
}
return(format(current_date, "%Y-%m-%d"))
}
# Example usage:
start_date <- "2025-06-17"
days_back <- 10
exclude_dates <- c("2025-06-10", "2025-06-12", "2025-06-14") # Example exclusion dates
prior_working_date <- calculate_prior_working_date(start_date, days_back, exclude_dates)
print(paste("The target working date:", prior_working_date))
